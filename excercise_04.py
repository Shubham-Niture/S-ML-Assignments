# -*- coding: utf-8 -*-
"""Excercise_04.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lMfetCqhvB6gCvtEtUVgm_b_1x-bvOY-
"""

import pandas as pd
import numpy as np
from sklearn.impute import SimpleImputer
from sklearn.preprocessing import StandardScaler, MinMaxScaler
from sklearn.feature_selection import SelectKBest, mutual_info_classif, RFE
from sklearn.linear_model import LogisticRegression, LassoCV
from scipy.stats import zscore

# Load the Titanic dataset
titanic_df = pd.read_csv('Titanic-Dataset.csv')

# Handling Missing Values
# Impute 'Age' with median and 'Embarked' with mode
imputer_age = SimpleImputer(strategy='median')
titanic_df['Age'] = imputer_age.fit_transform(titanic_df[['Age']])
imputer_embarked = SimpleImputer(strategy='most_frequent')
# Fix: Reshape the output of fit_transform to a 1D array
titanic_df['Embarked'] = imputer_embarked.fit_transform(titanic_df[['Embarked']]).ravel()

# Scaling Data
scaler_z = StandardScaler()
scaler_minmax = MinMaxScaler()
titanic_df['Age_z'] = scaler_z.fit_transform(titanic_df[['Age']])
titanic_df['Fare_z'] = scaler_z.fit_transform(titanic_df[['Fare']])
titanic_df['Age_minmax'] = scaler_minmax.fit_transform(titanic_df[['Age']])
titanic_df['Fare_minmax'] = scaler_minmax.fit_transform(titanic_df[['Fare']])

# Handling Noise
np.random.seed(0)
titanic_df['Fare'] += np.random.normal(0, 10, titanic_df.shape[0])
titanic_df['Fare'] = titanic_df['Fare'].rolling(window=3, min_periods=1).mean()

# Handling Outliers
z_scores = zscore(titanic_df[['Fare']])
outliers = np.abs(z_scores) > 3
titanic_df_no_outliers = titanic_df[~outliers.any(axis=1)]

# Feature Selection
# Filter method: Mutual Information
mi_scores = mutual_info_classif(titanic_df_no_outliers[['Age', 'Fare']], titanic_df_no_outliers['Survived'])

# Wrapper method: RFE
model = LogisticRegression(max_iter=500)
rfe = RFE(model, n_features_to_select=1)
rfe.fit(titanic_df_no_outliers[['Age', 'Fare']], titanic_df_no_outliers['Survived'])

# Embedded method: Lasso
lasso = LassoCV(cv=5)
lasso.fit(titanic_df_no_outliers[['Age', 'Fare']], titanic_df_no_outliers['Survived'])

# Results
features = pd.DataFrame({
    'Feature': ['Age', 'Fare'],
    'MI Score': mi_scores,
    'Included in RFE': rfe.support_,
    'Lasso Coef': lasso.coef_
})
print(features)